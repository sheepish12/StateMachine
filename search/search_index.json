{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"StateMachine is a module that provides an implementation of the finite-state machine model. For more information on finite-state machines and their uses Note This page should be expanded upon.","title":"Home"},{"location":"api/","text":"StateMachine StateMachine.create StateMachine.create( infoByState: {string: {...}}, initialState: string ) => machine: Machine Create and return a new state Machine based on the arguments passed. infoByState should be a dictionary including the following key-value pairs: entryAction?=(): (oldState: string, newState: string, ...args: any) exitAction?=(): (oldState: string, newState: string, ...args: any) stateByInput: {string: string} Machine Machine.input Machine.input( input: string, ...args: any ) => didChange: boolean Transition to the next state if the current state supports a transition with input , and pass args to the transition actions. Machine.disable Machine.disable() Disconnect all transition event connections, preparing the Machine for clean up and disabling its ability to change states. Machine.currentState Machine.currentState: string Note This property should be documented in more detail. Machine.isEnabled Machine.isEnabled: boolean Note This property should be documented in more detail. Machine.isChangingState Machine.isChangingState: boolean Note This property should be documented in more detail. Machine.stateChanged Machine.stateChanged: RBXScriptSignal< oldState: string, newState: string, ...args: any > Note This signal should be documented in more detail.","title":"API"},{"location":"api/#statemachine","text":"","title":"StateMachine"},{"location":"api/#statemachinecreate","text":"StateMachine.create( infoByState: {string: {...}}, initialState: string ) => machine: Machine Create and return a new state Machine based on the arguments passed. infoByState should be a dictionary including the following key-value pairs: entryAction?=(): (oldState: string, newState: string, ...args: any) exitAction?=(): (oldState: string, newState: string, ...args: any) stateByInput: {string: string}","title":"StateMachine.create"},{"location":"api/#machine","text":"","title":"Machine"},{"location":"api/#machineinput","text":"Machine.input( input: string, ...args: any ) => didChange: boolean Transition to the next state if the current state supports a transition with input , and pass args to the transition actions.","title":"Machine.input"},{"location":"api/#machinedisable","text":"Machine.disable() Disconnect all transition event connections, preparing the Machine for clean up and disabling its ability to change states.","title":"Machine.disable"},{"location":"api/#machinecurrentstate","text":"Machine.currentState: string Note This property should be documented in more detail.","title":"Machine.currentState"},{"location":"api/#machineisenabled","text":"Machine.isEnabled: boolean Note This property should be documented in more detail.","title":"Machine.isEnabled"},{"location":"api/#machineischangingstate","text":"Machine.isChangingState: boolean Note This property should be documented in more detail.","title":"Machine.isChangingState"},{"location":"api/#machinestatechanged","text":"Machine.stateChanged: RBXScriptSignal< oldState: string, newState: string, ...args: any > Note This signal should be documented in more detail.","title":"Machine.stateChanged"}]}